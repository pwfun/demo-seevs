name: Validate Code Blocks

on:
  pull_request:
    paths:
      - 'docs/**/*.md'
  push:
    branches:
      - main
    paths:
      - 'docs/**/*.md'

jobs:
  validate-code:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Validate code blocks
        run: |
          python3 << 'PYTHON_SCRIPT'
          import re
          import subprocess
          import sys
          from pathlib import Path
          
          has_errors = False
          
          # Find all markdown files
          md_files = list(Path('docs').rglob('*.md'))
          
          print(f"Checking {len(md_files)} markdown file(s)...")
          print()
          
          for md_file in md_files:
              content = md_file.read_text()
              
              # Extract JavaScript code blocks
              js_pattern = r'```javascript\n(.*?)```'
              js_blocks = re.findall(js_pattern, content, re.DOTALL)
              
              if js_blocks:
                  print(f"📄 {md_file}")
                  for i, code in enumerate(js_blocks, 1):
                      # Save to temp file
                      temp_file = f'/tmp/code_block_{i}.js'
                      with open(temp_file, 'w') as f:
                          f.write(code)
                      
                      # Validate with Node
                      result = subprocess.run(
                          ['node', '--check', temp_file],
                          capture_output=True,
                          text=True
                      )
                      
                      if result.returncode == 0:
                          print(f"  ✅ JavaScript block #{i}: Valid")
                      else:
                          print(f"  ❌ JavaScript block #{i}: INVALID")
                          print(f"     Error: {result.stderr.strip()}")
                          has_errors = True
              
              # Extract JSON code blocks
              json_pattern = r'```json\n(.*?)```'
              json_blocks = re.findall(json_pattern, content, re.DOTALL)
              
              if json_blocks and not js_blocks:
                  print(f"📄 {md_file}")
              
              for i, code in enumerate(json_blocks, 1):
                  # Validate JSON
                  result = subprocess.run(
                      ['node', '-e', f'JSON.parse({repr(code)})'],
                      capture_output=True,
                      text=True
                  )
                  
                  if result.returncode == 0:
                      print(f"  ✅ JSON block #{i}: Valid")
                  else:
                      print(f"  ❌ JSON block #{i}: INVALID")
                      print(f"     Error: {result.stderr.strip()}")
                      has_errors = True
          
          print()
          if has_errors:
              print("❌ Code validation FAILED - fix syntax errors above")
              sys.exit(1)
          else:
              print("✅ All code blocks are valid!")
          PYTHON_SCRIPT
